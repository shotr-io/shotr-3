<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Drawing;
using System.Windows.Forms;
using Microsoft.Win32;


namespace Shotr.Core.Controls.DpiScaling {
    <#
    var controls = new (string, ControlTypeEnum)[]
    {
        ("Control", ControlTypeEnum.Control),
        ("Button", ControlTypeEnum.Control),
        ("CheckBox", ControlTypeEnum.Control),
        ("ListView", ControlTypeEnum.Control),
        ("PictureBox", ControlTypeEnum.Control),
        ("ComboBox", ControlTypeEnum.Control),
        ("Form", ControlTypeEnum.Form),
        ("Label", ControlTypeEnum.Control),
        ("LinkLabel", ControlTypeEnum.Control),
        ("Panel", ControlTypeEnum.Control),
        ("ProgressBar", ControlTypeEnum.Control),
        ("TabControl", ControlTypeEnum.Control),
        ("TabPage", ControlTypeEnum.Control),
        ("TextBox", ControlTypeEnum.Control)
    };


	foreach( var control in controls )
    { 
    #>#region <#=control.Item1#>
	public class DpiScaled<#=control.Item1#> : <#=control.Item1#>
    {
        public virtual bool Scaled { get; set; } = true;
        public virtual bool ScaleLocationY { get; set; } = true;
        public virtual bool BasePaint { get; set; } = false;

        private Size _originalSize { get; set; }
        private Point _originalLocation { get; set; }
        private bool _alreadyRan { get; set; }
        private float? _dpiScalingFactor { get; set; }
        <#
        if (control.Item2 == ControlTypeEnum.Form) 
        {
        #>
        private int _storedScreenIndex { get; set; }
        private bool _screenResizing { get; set; }
        <#
        }
        #>

        public DpiScaled<#=control.Item1#>() 
        {
            SystemEvents.DisplaySettingsChanged += OnDisplaySettingsChanged;
            <#
            if (control.Item2 == ControlTypeEnum.Form) 
            {
                #>
                _storedScreenIndex = Array.IndexOf(Screen.AllScreens, Screen.FromControl(this));
                Move += (sender, args) =>
                {
                    if (_screenResizing)
                    {
                        var currentIndex = GetScreenIndex();
                        if (_storedScreenIndex != currentIndex)
                        {
                            Refresh();
                            _storedScreenIndex = currentIndex;
                        }
                    }
                };

                ResizeBegin += (sender, args) =>
                {
                    _screenResizing = true;
                }; 
            
                ResizeEnd += (sender, args) =>
                {
                    _screenResizing = false;
                    Scale(ignoreCheck: true);
                };

                int GetScreenIndex()
                {
                    return Array.IndexOf(Screen.AllScreens, Screen.FromControl(this));
                }
                <#
            }  
        #>
        
        }

        private void OnDisplaySettingsChanged(object? sender, EventArgs args) 
        {
            Scale(ignoreCheck: true);
        }

        protected virtual void OnControlScaled(float scalingFactor) 
        {
        }

        protected override void OnPaint(PaintEventArgs e) 
        {
            Scale(onPaint: true);

            _dpiScalingFactor ??= DpiScaler.GetScalingFactor(this);

            if (Math.Abs(_dpiScalingFactor.Value - DpiScaler.GetScalingFactor(this)) > 0.00001) 
            {
                Scale(ignoreCheck: true);
                _dpiScalingFactor = DpiScaler.GetScalingFactor(this);
            }

            if (BasePaint) 
            {
                base.OnPaint(e);
            }
        }

        public void Scale(bool onPaint = false, bool ignoreCheck = false)
        {
            if (onPaint && !ignoreCheck) 
            {
                if (!_alreadyRan)
                {
                    _alreadyRan = true;
                }
                else 
                {
                    return;
                }
            }

            if (Scaled)
            {
                if (!ScaleLocationY) 
                {
                    (_originalSize, _originalLocation) = DpiScaler.ScaleSize(this, _originalSize, _originalLocation);
                    (_originalSize, _originalLocation) = DpiScaler.ScaleLocationX(this, _originalSize, _originalLocation);
                }
                else 
                {
                    (_originalSize, _originalLocation) = DpiScaler.ScaleControl(this, _originalSize, _originalLocation, <#= (control.Item2 == ControlTypeEnum.Control).ToString().ToLower() #>);
                }
                
                Console.WriteLine($"DPI Scaled <#=control.Item1#>: {Text} - Size: {Width}x{Height} (orig {_originalSize.Width}x{_originalSize.Height}), Location: {Location.X}x{Location.Y} (orig: {_originalLocation.X}x{_originalLocation.Y}), {DpiScaler.GetScalingFactor(this)}f");
                OnControlScaled(DpiScaler.GetScalingFactor(this));
            }
        }

        public void ManualDpiScale()
        {
            (_originalSize, _originalLocation) = DpiScaler.ScaleSize(this, _originalSize, _originalLocation);
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
            SystemEvents.DisplaySettingsChanged -= OnDisplaySettingsChanged;
        }
    }
    #endregion

	<# } #>
}

<#+
    enum ControlTypeEnum {
        Form,
        Control,
        Menu
    }
#>