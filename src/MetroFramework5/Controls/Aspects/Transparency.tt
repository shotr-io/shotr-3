#region Copyright (c) 2013 Jens Thiel, http://thielj.github.io/MetroFramework
/*
 
MetroFramework - Windows Modern UI for .NET WinForms applications

Copyright (c) 2013 Jens Thiel, http://thielj.github.io/MetroFramework

Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in the 
Software without restriction, including without limitation the rights to use, copy, 
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, 
and to permit persons to whom the Software is furnished to do so, subject to the 
following conditions:

The above copyright notice and this permission notice shall be included in 
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 
 */
#endregion

/**************************************************************************************

                        GENERATED FILE - DO NOT EDIT

 **************************************************************************************/
<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Windows.Forms" #> 
<#@ import namespace="System.Drawing" #> 

using System;
using System.Diagnostics;
using System.Drawing;
using System.ComponentModel;
using System.Windows.Forms;

// ReSharper disable SuggestUseVarKeywordEvident
// ReSharper disable PossibleNullReferenceException

namespace MetroFramework5.Controls
{

<#

	// Controls known to not be compatible with transparency: 
	//		TextBox, RichTextBox (see article on code project)
	//		TabControl ( empty setter for BacColor - might work with overriding the getter)

	var controls = new []
    {
        new {Name = "MetroCheckBox"},
        new {Name = "MetroComboBox"},
        new {Name = "MetroLabel"},
		new {Name = "MetroLink"},
        new {Name = "MetroPanel"},
        new {Name = "MetroProgressSpinner"},
        new {Name = "MetroRadioButton"},
        new {Name = "MetroTabPage"},
		new {Name = "MetroTile"},
		new {Name = "MetroToggle"},
		new {Name = "MetroTrackBar"},
        new {Name = "MetroUserControl"},
    };

	// see http://www.bobpowell.net/transcontrols.htm
    // see VisualStyleRenderer.DrawParentBackground
    // see ButtonRenderer.DrawParentBackground

	foreach( var control in controls )
    {
#>

	#region <#=control.Name#>

	[EditorBrowsable(EditorBrowsableState.Advanced)]
    public partial class <#=control.Name#>
    {
#if DEBUG
		private static bool _loggedTransparencySupport;
#endif

		private void UseTransparency()
		{
            if( !GetStyle(ControlStyles.SupportsTransparentBackColor) )
			{
#if DEBUG
				Debug.WriteLineIf(!_loggedTransparencySupport, base.GetType().Name + ": enabling SupportsTransparentBackColor.");
				_loggedTransparencySupport = true;
#endif
				SetStyle(ControlStyles.UserPaint | ControlStyles.SupportsTransparentBackColor, true);
			}
			Debug.Assert(GetStyle(ControlStyles.ContainerControl) || GetStyle(ControlStyles.AllPaintingInWmPaint));
		}

        protected override void OnMetroStyleChanged(EventArgs e)
        {
            BaseBackColor = EffectiveBackColor;
            base.OnMetroStyleChanged(e);
        }

        <#/*private bool _invalidated;*/#>

        protected override void OnPaintBackground(PaintEventArgs e)
        {
			try // without ControlStyles.AllPaintingInWmPaint, we need some error handling
			{
				Color backColor = EffectiveBackColor;

				if (backColor.A == 255)
				{
					e.Graphics.Clear(backColor);
					return;
				}
<#/*
				if (!_invalidated) // strange... this will never get called. Why did I do it. Did it suddenly work?
				{
					_invalidated = true;
					Rectangle parentClipRect = new Rectangle(e.ClipRectangle.Left + Left, e.ClipRectangle.Top + Top,
															 e.ClipRectangle.Width, e.ClipRectangle.Height);
					Parent.Invalidate(parentClipRect, false);
					Parent.Update();
				}
*/#>
				base.OnPaintBackground(e);
			}
            catch (Exception ex)
            {
                Trace.WriteLine(ex);
                Invalidate();
            }
        }
<#/*
		// This may help in reducing flicker during resize
		protected override void OnResize(EventArgs e)
		{
			bool isVisible = Visible;
			if( isVisible ) Visible = false;
			base.OnResize(e);
			if( isVisible) Visible = true;
		}
*/#>
                  
    }

	#endregion

<#
    }
#>

}
 
<#+
  // Insert any template procedures here
#>