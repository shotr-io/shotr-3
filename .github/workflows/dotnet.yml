name: dotnet

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ '*' ]
    tags:
      - 'v*'
    paths-ignore:
      - '**.md'


defaults:
  run:
    working-directory: ./
    
jobs:
  version:
    runs-on: ubuntu-latest    
    steps:
    - uses: actions/checkout@v2
    - name: Set version number
      run: | 
        chmod +x "${GITHUB_WORKSPACE}/.github/version.sh"
        "${GITHUB_WORKSPACE}/.github/version.sh"
  build:
    runs-on: windows-latest    
    needs: version
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100
    - name: Restore dependencies
      run: dotnet restore
    - name: Publish
      run: dotnet publish -r win-x64 -c "${{ env.BUILD_BRANCH }}" 
    - name: Test
      run: dotnet test --no-build --verbosity normal
    - uses: actions/upload-artifact@v2
      with:
        name: Shotr
        path: ./src/Shotr.Ui/bin/${{env.BUILD_BRANCH}}/net5.0-windows10.0.19041.0/win-x64/publish/Shotr.exe
    - uses: actions/upload-artifact@v2
      with:
        name: Shotr-Installer
        path: ./src/Shotr.Ui.Installer/bin/${{env.BUILD_BRANCH}}/net5.0-windows/win-x64/publish/Shotr-Installer.exe

  comment-on-pr:
    name: Leave a comment with a link to the build on the PR
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/github-script@v3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.issues.createComment( {
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'The artifact is located here: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}#artifacts' 
          } )
  create-release:
    name: Create Release Draft and Attach Asset
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Set Release Version
        id: get_release_version
        run: echo ::set-output name=version::$(echo $GITHUB_REF | cut -d / -f 3 | sed s/^v// | sed 's/-a//' )
        
      - name: Get Issues and Format
        id: get_issues_and_format
        run: | 
        
            FEATURE_ISSUES=`GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} gh issue list -m "${{ steps.get_release_version.outputs.version }}" -s "all" -l "feature" | awk -F $'\t' '{ printf "- %s (#%s)\n", $3, $1 }'`        
            REFACTOR_ISSUES=`GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} gh issue list -m "${{ steps.get_release_version.outputs.version }}" -s "all" -l "refactor" | awk -F $'\t' '{ printf "- %s (#%s)\n", $3, $1 }'`
            BUG_ISSUES=`GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} gh issue list -m "${{ steps.get_release_version.outputs.version }}" -s "all" -l "bug" | awk -F $'\t' '{ printf "- %s (#%s)\n", $3, $1 }'`
            
            ISSUES="${FEATURE_ISSUES}${REFACTOR_ISSUES}\n\n${BUG_ISSUES}"
            echo 'ISSUES<<EOF' >> $GITHUB_ENV
            echo "$ISSUES" >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV

      - name: Download Zip Artifact
        id: download
        uses: actions/download-artifact@v2
        with:
          name: Shotr
          
      - name: Download Installer Zip Artifact
        id: download-installer
        uses: actions/download-artifact@v2
        with:
          name: Shotr-Installer
          
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: ${{steps.download.outputs.download-path}}
        
      - name: Zip up release file
        run: zip Shotr.zip Shotr.exe
        working-directory: ${{steps.download.outputs.download-path}}
        
      - name: Display structure of downloaded files for installer
        run: ls -R
        working-directory: ${{steps.download-installer.outputs.download-path}}
        
      - name: Zip up release file for installer
        run: zip Shotr-Installer.zip Shotr-Installer.exe
        working-directory: ${{steps.download-installer.outputs.download-path}}
        
      - name: Create Release Draft
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.get_release_version.outputs.version }}
          draft: true
          prerelease: ${{ contains(github.ref, '-a') }}
          body: ${{env.ISSUES}}

      - name: Upload Release Asset Exeutable
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Shotr.exe
          asset_name: Shotr.exe
          asset_content_type: application/octet-stream
          
      - name: Upload Release Asset Zip
        id: upload-release-asset-zip
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Shotr.zip
          asset_name: Shotr.zip
          asset_content_type: application/zip
          
      - name: Upload Installer Release Executable
        id: upload-release-asset-installer
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Shotr-Installer.exe
          asset_name: Shotr-Installer.exe
          asset_content_type: application/octet-stream
          
      - name: Upload Installer Release Zip
        id: upload-release-asset-installer-zip
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Shotr-Installer.zip
          asset_name: Shotr-Installer.zip
          asset_content_type: application/zip
          
#
#      - name: Publish Release
#        run: |
#          curl \
#            --request PATCH \
#            --url https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }} \
#            --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
#            --header "Accept: application/vnd.github.v3+json" \
#            --data-raw '{"draft":false}'
